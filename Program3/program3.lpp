/*
* program3.lpp
* Heather Aust
* COSC 4785 Fall 2019
* Program 03
* October 22, 2019
*/

%{
#include <iostream>
#include <string>
#include "node.hpp"
#include "errVal.hpp"
#include "program3.tab.hpp"
#include <vector>

using namespace std;

int yyColumn=1;
int yyPrevColumn=1;
int syntErrCol=1;
int yyRow=1;
vector<string> lines;
vector<ErrVal*> errors;
string currLine;
string idPrtStr = "ID --> ";
string numPrtStr = "NUMBER --> ";
extern void addToCurrLine();
extern void newLine();

/*
 * yyerror() function
 */
void yyerror(const char *msg)
{
  errors.push_back(new ErrVal(yyRow, yyPrevColumn, msg));
}


%}

%option outfile="program3_lex.cpp"
%option noyywrap
%option yylineno
%x comment
%x error

space      [ ]
tab      [\t]
number      [0-9]+
identifier    [_a-zA-Z][_0-9a-zA-Z]*

%%
\/\/.*[\n]    {newLine();}
"/*"             BEGIN(comment);
<comment>[^*\n]*  {addToCurrLine();}
<comment>"*"+[^*/\n]*  {addToCurrLine();}
<comment>\n             {newLine();}
<comment>"*"+"/"        {addToCurrLine(); BEGIN(INITIAL);}
"null"    {yylval.ttype=new Node;
      yylval.ttype->setval(yytext);
      addToCurrLine(); return NULLT;}
"read"    {yylval.ttype=new Node;
      yylval.ttype->setval(yytext);
      addToCurrLine(); return READ;}
"("    {addToCurrLine(); return LPAREN;}
")"    {addToCurrLine(); return RPAREN;}
"["    {addToCurrLine(); return LBRACK;}
"]"    {addToCurrLine(); return RBRACK;}
"+"    {addToCurrLine(); return PLUS;}
"-"    {addToCurrLine(); return MINUS;}
"||"    {addToCurrLine(); return OR;}
"*"    {addToCurrLine(); return TIMES;}
"/"    {addToCurrLine(); return DIV;}
"%"    {addToCurrLine(); return MOD;}
"&&"    {addToCurrLine(); return AND;}
"=="    {addToCurrLine(); return EQ;}
"!="    {addToCurrLine(); return NE;}
">="    {addToCurrLine(); return GE;}
"<="    {addToCurrLine(); return LE;}
">"    {addToCurrLine(); return GT;}
"<"    {addToCurrLine(); return LT;}
"!"    {addToCurrLine(); return NOT;}
";"    {addToCurrLine(); return SEMI;}
"new"    {yylval.ttype=new Node;
      yylval.ttype->setval(yytext);
      addToCurrLine(); return NEW;}
"int"    {yylval.ttype=new Node;
      yylval.ttype->setval(yytext);
      addToCurrLine(); return INT;}
"this"    {yylval.ttype=new Node;
      yylval.ttype->setval(yytext);
      addToCurrLine(); return THIS;}
"."    {addToCurrLine(); return DOT;}
{identifier}    {yylval.ttype=new Node;
      yylval.ttype->setval(idPrtStr + yytext +'\n');
      addToCurrLine();
      return ID;}
{number}  {yylval.ttype=new Node;
      //yylval.ttype->setval(atoi(yytext));
      yylval.ttype->setval(numPrtStr + yytext +'\n');
      addToCurrLine();
      return NUMBER;}
{tab}    {addToCurrLine();}
{space}+  {addToCurrLine();}
[\n]    {newLine();}
.    {addToCurrLine(); 
                 yyerror("Lexical Error: Unrecognized character");}
%%
